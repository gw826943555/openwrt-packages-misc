#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017-2019 Yousong Zhou <yszhou4tech@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

USE_PROCD=1
START=99

NAME=shadowsocksr
CONFIG_FILE=/var/etc/shadowsocksr-libev/ssr_redir.json
SSR_REDIR=/usr/bin/ssr-redir

ssr_xxx() {
	[ -x $SSR_REDIR ] || return
	validate_ssr_redir_section "global" ssr_validate_mklocal
	validate_ssr_redir_section "global" || return
	[ "$disabled" = 0 ] || { echo "ssr_redir disbaled" && return; }

	validate_common_server_options "$server_cfg" ssr_validate_mklocal
	validate_common_server_options "$server_cfg" || { echo "server config error" && return; }

	if [ $reuse_port -eq 0 ];then
		reuse_port='false'
	else
		reuse_port='true'
	fi

	if [ $fast_open -eq 0 ];then
		fast_open='false'
	else
		fast_open='true'
	fi

	cat <<-EOF >$CONFIG_FILE
		{
		"server": "${server}",
		"server_port": ${server_port},
		"local_address": "${local_address}",
		"local_port": ${local_port},
		"password": "${password}",
		"timeout": ${timeout},
		"method": "${encryption}",
		"protocol": "${protocol}",
		"protocol_param": "${protocol_param}",
		"obfs": "${obfs}",
		"obfs_param": "${obfs_param}",
		"reuse_port": ${reuse_port},
		"fast_open": ${fast_open}
		}
	EOF

	procd_open_instance
	procd_set_param command "$SSR_REDIR" -c "$CONFIG_FILE" -u
	[ "$verbose" = 0 ] || procd_append_param command -v
	procd_set_param file "$CONFIG_FILE"
	procd_set_param respawn
	procd_close_instance
	ssr_rules_cb

	return
}

ssr_rules_cb() {
	ssr_rules_server="$server"
	ssr_rules_port="$local_port"
}

ssr_rules() {
	local cfg="ssr_rules"
	local bin="/usr/bin/ssr-rules"
	local cfgtype
	local args

	[ -x "$bin" ] || return 1

	"$bin" -f
#	"$bin" -6 -f

	config_get cfgtype "$cfg" TYPE
	[ "$cfgtype" = ssr_rules ] || return 1

	eval "$(validate_ssr_rules_section "$cfg" ssr_validate_mklocal)"
	validate_ssr_rules_section "$cfg" || return 1
	[ "$disabled" = 0 ] || return 0

	[ "$dst_forward_recentrst" = 0 ] || args="$args --dst-forward-recentrst"

	ssr_rules_call
#	ss_rules_call -6
}

ssr_rules_call() {
	/usr/bin/ssr-rules "$@" \
			-s "$ssr_rules_server" \
			-l "$ssr_rules_port" \
			-L "$ssr_rules_port" \
			--src-default "$src_default" \
			--dst-default "$dst_default" \
			--local-default "$local_default" \
			--dst-bypass-file "$dst_ips_bypass_file" \
			--dst-forward-file "$dst_ips_forward_file" \
			--dst-bypass "$dst_ips_bypass" \
			--dst-forward "$dst_ips_forward" \
			--src-bypass "$src_ips_bypass" \
			--src-forward "$src_ips_forward" \
			--src-checkdst "$src_ips_checkdst" \
			--ifnames "$ifnames" \
			--ipt-extra "$ipt_args" \
			--dst-net-forward-file "$dst_net_forward_file" \
			--dst-net-bypass-file "$dst_net_bypass_file" \
			--dst-net-dns-server "$dst_net_dns_server" \
			--dst-net-dns-port "$dst_net_dns_port" \
			$args \
		|| "$bin" "$@" -f
}

start_service() {
	mkdir -p /var/etc/shadowsocksr-libev
	
	config_load shadowsocksr
	ssr_xxx
	ssr_rules
}

stop_service() {
	local bin="/usr/bin/ssr-rules"

	[ -x "$bin" ] && {
		"$bin" -f
#		"$bin" -6 -f
	}
	rm -rf /var/etc/shadowsocksr-libev
}

service_triggers() {
	procd_add_reload_interface_trigger wan
	procd_add_reload_trigger shadowsocksr
}

ssr_validate_mklocal() {
	local tuple opts

	shift 2
	for tuple in "$@"; do
		opts="${tuple%%:*} $opts"
	done
	[ -z "$opts" ] || echo "local $opts"
}

ssr_validate() {
	uci_validate_section shadowsocksr "$@"
}

validate_common_server_options() {
	local stream_methods='"table", "rc4", "rc4-md5", "aes-128-cfb", "aes-192-cfb", "aes-256-cfb", "aes-128-ctr", "aes-192-ctr", "aes-256-ctr", "bf-cfb", "camellia-128-cfb", "camellia-192-cfb", "camellia-256-cfb", "salsa20", "chacha20", "chacha20-ietf"'
	local aead_methods='"aes-128-gcm", "aes-192-gcm", "aes-256-gcm", "chacha20-ietf-poly1305", "xchacha20-ietf-poly1305"'
	local obfs_methods='"plain", "http_simple", "http_post", "tls1.2_ticket_auth", "tls1.2_ticket_fastauth"'
	local protocol_methods='"origin", "verify_deflate", "auth_sha1_v4", "auth_aes128_sha1", "auth_aes128_md5", "auth_chain_a", "auth_chain_b"'

	uci_validate_section shadowsocksr server "${1}" \
		'server:host' \
		'server_port:port' \
		'password:string' \
		"encryption:or($stream_methods, $aead_methods)" \
		"obfs:or($obfs_methods)" \
		'obfs_param:string' \
		"protocol:or($protocol_methods)" \
		'protocol_param:string'
}

validate_ssr_redir_section() {
	uci_validate_section shadowsocksr ssr_redir "${1}" \
		'server_cfg:uci("shadowsocksr","@server")' \
		'disabled:bool:1' \
		'local_address:ipaddr:0.0.0.0' \
		'local_port:port:1080' \
		'fast_open:bool:0' \
		'reuse_port:bool:1' \
		'verbose:bool:0' \
		'timeout:uinteger'
}

validate_ssr_rules_section() {
	uci_validate_section shadowsocksr ssr_rules "$1" \
		'disabled:bool:0' \
		'src_ips_bypass:or(ipaddr,cidr)' \
		'src_ips_forward:or(ipaddr,cidr)' \
		'src_ips_checkdst:or(ipaddr,cidr)' \
		'dst_ips_bypass_file:file' \
		'dst_ips_bypass:or(ipaddr,cidr)' \
		'dst_ips_forward_file:file' \
		'dst_ips_forward:or(ipaddr,cidr)' \
		'src_default:or("bypass", "forward", "checkdst"):checkdst' \
		'dst_default:or("bypass", "forward"):bypass' \
		'local_default:or("bypass", "forward", "checkdst"):bypass' \
		'dst_forward_recentrst:bool:0' \
		'ifnames:maxlength(15)' \
		'ipt_args:string' \
		'dst_net_dns_port:port' \
		'dst_net_dns_server:ipaddr' \
		'dst_net_forward_file:file' \
		'dst_net_bypass_file:file'
}
