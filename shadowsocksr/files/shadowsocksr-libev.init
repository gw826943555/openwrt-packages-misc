#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017-2019 Yousong Zhou <yszhou4tech@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

USE_PROCD=1
START=99

NAME=shadowsocksr
CONFIG_FILE=/var/etc/shadowsocksr-libev/ssr_redir.json
SSR_REDIR=/usr/bin/ssr-redir

server_cfg="nil"

get_host_ip() {
	local host=$1
	local isip=""
	local ip=$host
	isip=$(echo $host | grep -E "([0-9]{1,3}[\.]){3}[0-9]{1,3}")
	if [ -z "$isip" ]; then
		if [ "$host" != "${host#*:[0-9a-fA-F]}" ]; then
			ip=$host
		else
			local ip=$(resolveip -4 -t 3 $host | awk 'NR==1{print}')
			[ -z "$ip" ] && ip=$(wget -q -O- http://119.29.29.29/d?dn=$1 | awk -F ';' '{print $1}')
		fi
	fi
	echo ${ip:="ERROR"}
}

ssr_mk_config_file() {
	cat <<-EOF >$CONFIG_FILE
		{
		    "server": "$(get_host_ip $(uci_get ${NAME} ${server_cfg} server))",
		    "server_port": $(uci_get ${NAME} ${server_cfg} server_port),
		    "local_address": "$(uci_get ${NAME} global local_address)",
			"local_port": "$(uci_get ${NAME} global local_port)",
		    "password": "$(uci_get ${NAME} ${server_cfg} password)",
		    "timeout": $(uci_get ${NAME} global time_out),
		    "method": "$(uci_get ${NAME} ${server_cfg} method)",
		    "protocol": "$(uci_get ${NAME} ${server_cfg} protocol)",
		    "protocol_param": "$(uci_get ${NAME} ${server_cfg} protocol_param)",
		    "obfs": "$(uci_get ${NAME} ${server_cfg} obfs)",
		    "obfs_param": "$(uci_get ${NAME} ${server_cfg} obfs_param)"
		}
EOF
}

ssr_xxx() {
	[ -x $SSR_REDIR ] || return
	
	server_cfg=$(uci_get shadowsocksr global server)
	[ "$(uci_get shadowsocksr global disabled )" = 0 ] || return
	[ "${server_cfg}" != "nil" ] || return

	ssr_mk_config_file

	procd_open_instance
	procd_set_param command "$SSR_REDIR" -c "$CONFIG_FILE" -u -v
	procd_set_param file "$CONFIG_FILE"
	procd_set_param respawn
	procd_close_instance

	return
}

ssr_rules() {
	local cfg="ssr_rules"
	local bin="/usr/bin/ssr-rules"
	local cfgtype
	local local_port_tcp local_port_udp
	local args

	[ -x "$bin" ] || return 1
	"$bin" -f
#	"$bin" -6 -f

	config_get cfgtype "$cfg" TYPE
	[ "$cfgtype" = ssr_rules ] || return 1

	eval "$(validate_ssr_rules_section "$cfg" ssr_validate_mklocal)"
	validate_ssr_rules_section "$cfg" || return 1
	[ "$disabled" = 0 ] || return 0

	local_port_tcp="$(uci_get ${NAME} global local_port)"
	local_port_udp="$(uci_get ${NAME} global local_port)"
	[ "$dst_forward_recentrst" = 0 ] || args="$args --dst-forward-recentrst"

	ssr_rules_call
#	ss_rules_call -6
}

ssr_rules_call() {
	/usr/bin/ssr-rules "$@" \
			-s "$(uci_get ${NAME} ${server_cfg} server)" \
			-l "$local_port_tcp" \
			-L "$local_port_udp" \
			--src-default "$src_default" \
			--dst-default "$dst_default" \
			--local-default "$local_default" \
			--dst-bypass-file "$dst_ips_bypass_file" \
			--dst-forward-file "$dst_ips_forward_file" \
			--dst-bypass "$dst_ips_bypass" \
			--dst-forward "$dst_ips_forward" \
			--src-bypass "$src_ips_bypass" \
			--src-forward "$src_ips_forward" \
			--src-checkdst "$src_ips_checkdst" \
			--ifnames "$ifnames" \
			--ipt-extra "$ipt_args" \
			$args \
		|| "$bin" "$@" -f
}

start_service() {
	mkdir -p /var/etc/shadowsocksr-libev
	
	config_load shadowsocksr
	ssr_xxx
	ssr_rules
}

stop_service() {
	local bin="/usr/bin/ssr-rules"

	[ -x "$bin" ] && {
		"$bin" -f
#		"$bin" -6 -f
	}
	rm -rf /var/etc/shadowsocksr-libev
}

service_triggers() {
	procd_add_reload_interface_trigger wan
	procd_add_reload_trigger shadowsocksr
}

ssr_validate_mklocal() {
	local tuple opts

	shift 2
	for tuple in "$@"; do
		opts="${tuple%%:*} $opts"
	done
	[ -z "$opts" ] || echo "local $opts"
}

ssr_validate() {
	uci_validate_section shadowsocksr "$@"
}

validate_ssr_rules_section() {
	"${2:-ssr_validate}" ssr_rules "$1" \
		'disabled:bool:0' \
		'src_ips_bypass:or(ipaddr,cidr)' \
		'src_ips_forward:or(ipaddr,cidr)' \
		'src_ips_checkdst:or(ipaddr,cidr)' \
		'dst_ips_bypass_file:file' \
		'dst_ips_bypass:or(ipaddr,cidr)' \
		'dst_ips_forward_file:file' \
		'dst_ips_forward:or(ipaddr,cidr)' \
		'src_default:or("bypass", "forward", "checkdst"):checkdst' \
		'dst_default:or("bypass", "forward"):bypass' \
		'local_default:or("bypass", "forward", "checkdst"):bypass' \
		'dst_forward_recentrst:bool:0' \
		'ifnames:maxlength(15)' \
		'ipt_args:string'
}
