#!/bin/sh /etc/rc.common
#
# Copyright (C) 2023-2024 William Guo <gw826943555@qq.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

USE_PROCD=1
START=99

ss_conf=shadowsocks-rust
ss_confdir=/var/etc/${ss_conf}
ss_bindir=/usr/bin

sslocal_locals_mkjson() {
	section="$1"
	local protocols='"socks", "http", "tunnel", "redir", "dns"'

	uci_validate_section shadowsocks-rust sslocal_servers "$section" \
		'local_address:ipaddr:127.0.0.1' \
		'local_port:port:123456' \
		"protocol:or($protocols)" \
		'forward_address:ipaddr' \
		'forward_port:port'

	json_add_object
	json_add_string "local_address" "$local_address"
	json_add_int "local_port" "$local_port"
	[ -z "$protocol" ] || json_add_string "protocol" "$protocol"
	[ -z "$forward_address" ] || json_add_string "forward_address" "$forward_address"
	[ -z "$forward_port" ] || json_add_int "forward_port" "$forward_port"
	json_close_object
}

sslocal_servers_mkjson() {
	section="$1"
	local stream_methods='"table", "rc4", "rc4-md5", "aes-128-cfb", "aes-192-cfb", "aes-256-cfb", "aes-128-ctr", "aes-192-ctr", "aes-256-ctr", "bf-cfb", "camellia-128-cfb", "camellia-192-cfb", "camellia-256-cfb", "salsa20", "chacha20", "chacha20-ietf"'
	local aead_methods='"aes-128-gcm", "aes-192-gcm", "aes-256-gcm", "chacha20-ietf-poly1305", "xchacha20-ietf-poly1305"'

	uci_validate_section shadowsocks-rust sslocal_servers "$section" \
		'server:string' \
		'server_port:port' \
		'password:string' \
		'key:string' \
		"encryption:or($stream_methods, $aead_methods)" \
		'plugin:string' \
		'plugin_opts:string'

	json_add_object
	json_add_string "server" "$server"
	json_add_int "server_port" "$server_port"
	json_add_string "password" "$password"
	json_add_string "method" "$encryption"
	[ -z "$key" ] || json_add_string "key" "$key"
	[ -z "$plugin" ] || jjson_add_string "plugin" "$plugin"
	[ -z "$plugin_opts" ] || json_add_string "plugin_opts" "$plugin_opts"
	json_close_object
}

sslocal_start() {
	local confjson="$ss_confdir/sslocal.json"

	config_get enabled sslocal enabled 0
	[ "$enabled" -eq "0"] && return 0
	[ -x "$ss_bindir/sslocal" ] || return 1

	json_init

	json_add_array "locals"
	config_foreach sslocal_locals_mkjson locals
	json_close_array

	json_add_array "servers"
	config_foreach sslocal_servers_mkjson servers
	json_close_array

	json_add_boolean use_syslog 1
	json_add_boolean reuse_port 1
	json_dump -i >"$confjson"

	procd_open_instance "$ss_conf"
	procd_set_param command "$ss_bindir/sslocal" -c "$confjson"
	[ "$verbose" = 0 ] || procd_append_param command -v
	procd_set_param file "$confjson"
	procd_set_param respawn
	procd_close_instance
}

start_service() {
	mkdir -p "$ss_confdir"
	config_load "$ss_conf"

	sslocal_start
}

stop_service() {
	rm -rf "$ss_confdir"
}

reload_service() {
	stop_service
	start
}

service_triggers() {
	procd_add_reload_trigger "$ss_conf"
}
