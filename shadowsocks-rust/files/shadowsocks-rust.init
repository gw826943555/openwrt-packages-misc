#!/bin/sh /etc/rc.common
#
# Copyright (C) 2023-2024 William Guo <gw826943555@qq.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

USE_PROCD=1
START=99

ss_conf=shadowsocks-rust
ss_confdir=/var/etc/${ss_conf}
ss_bindir=/usr/bin

sslocal_servers_mkjson() {
	section="$1"
	local stream_methods='"table", "rc4", "rc4-md5", "aes-128-cfb", "aes-192-cfb", "aes-256-cfb", "aes-128-ctr", "aes-192-ctr", "aes-256-ctr", "bf-cfb", "camellia-128-cfb", "camellia-192-cfb", "camellia-256-cfb", "salsa20", "chacha20", "chacha20-ietf"'
	local aead_methods='"aes-128-gcm", "aes-192-gcm", "aes-256-gcm", "chacha20-ietf-poly1305", "xchacha20-ietf-poly1305"'

	uci_validate_section shadowsocks-rust sslocal_servers "$section" \
		'disabled:bool:1' \
		'server:string' \
		'server_port:port' \
		'password:string' \
		'key:string' \
		"encryption:or($stream_methods, $aead_methods)" \
		'plugin:string' \
		'plugin_opts:string'

	[ "$disabled" -eq "0" ] || return 1

	json_add_object
	json_add_boolean "disabled" "$disabled"
	json_add_string "server" "$server"
	json_add_int "server_port" "$server_port"
	json_add_string "password" "$password"
	json_add_string "method" "$encryption"
	[ -z "$key" ] || json_add_string "key" "$key"
	[ -z "$plugin" ] || jjson_add_string "plugin" "$plugin"
	[ -z "$plugin_opts" ] || json_add_string "plugin_opts" "$plugin_opts"
	json_close_object
}

sslocal_start() {
	[ -x "$ss_bindir/sslocal" ] || return 1

	local confjson="$ss_confdir/sslocal.json"

	uci_validate_section "$ss_conf" sslocal sslocal \
		'disabled:bool:1' \
		'local_address:ipaddr:0.0.0.0' \
		'local_port:port:123456' \
		'mode:or("tcp_only", "udp_only", "tcp_and_udp"):tcp_and_udp' \
		'timeout:uinteger:60' \
		'fast_open:bool:0' \
		'verbose:bool:0' \
		'reuse_port:bool:0'

	[ "$disabled" -eq "0" ] || return 1

	json_init

	json_add_array "servers"
	config_foreach sslocal_servers_mkjson sslocal_servers
	json_close_array

	json_add_boolean use_syslog 1
	json_add_boolean ipv6_first "$ipv6_first"
	json_add_boolean fast_open "$fast_open"
	json_add_boolean reuse_port "$reuse_port"
	json_add_boolean no_delay "$no_delay"
	[ -z "$local_address" ] || json_add_string local_address "$local_address"
	[ -z "$local_port" ] || json_add_int local_port "$local_port"
	[ -z "$local_ipv4_address" ] || json_add_string local_ipv4_address "$local_ipv4_address"
	[ -z "$local_ipv6_address" ] || json_add_string local_ipv6_address "$local_ipv6_address"
	[ -z "$mode" ] || json_add_string mode "$mode"
	[ -z "$mtu" ] || json_add_int mtu "$mtu"
	[ -z "$timeout" ] || json_add_int timeout "$timeout"
	[ -z "$user" ] || json_add_string user "$user"
	[ -z "$acl" ] || json_add_string acl "$acl"
	json_dump -i >"$confjson"

	procd_open_instance "$ss_conf"
	procd_set_param command "$ss_bindir/sslocal" -c "$confjson"
	[ "$verbose" = 0 ] || procd_append_param command -v
	procd_set_param file "$confjson"
	procd_set_param respawn
	procd_close_instance
}

start_service() {
	mkdir -p "$ss_confdir"
	config_load "$ss_conf"

	sslocal_start
}

stop_service() {
	rm -rf "$ss_confdir"
}

reload_service() {
	stop_service
	start
}


service_triggers() {
	procd_add_reload_trigger "$ss_conf"
#	procd_open_validate
#	validate_server_section
#	validate_sslocal_section
#	validate_ssredir_section
#	validate_ssrules_section
#	validate_ssserver_section
#	validate_sstunnel_section
#	procd_close_validate
}
